package pop

import (
	"bytes"
	"context"
	"io/ioutil"
	"os"
	"text/template"
)

var (
	//configTemplate is used to generate a copy of database.yml in the binary.
	configTemplate = `
// this file was generated by X to be able to compile the 
// binary of the app.
package config

import (
	"strings"

	"github.com/gobuffalo/pop/v5"
)

var config = strings.NewReader(` + "`" + `
{{.Config}}
` + "`" + `)

func init() {
	pop.LoadFrom(config)
}`
)

func (p *Plugin) RunBeforeBuild(ctx context.Context, root string, args []string) error {
	f, err := p.findConfig()
	if err != nil {
		return err
	}

	content, err := p.buildDatabaseInit(f)
	if err != nil {
		return err
	}

	return ioutil.WriteFile("config/gen_database.go", []byte(content), 0600)
}

func (p *Plugin) findConfig() ([]byte, error) {
	f, err := ioutil.ReadFile("config/database.yml")
	if err != nil {
		return []byte{}, err
	}

	return f, err
}

func (p *Plugin) buildDatabaseInit(fileContent []byte) (string, error) {
	tmpl, err := template.New("config").Parse(configTemplate)
	if err != nil {
		return "", err
	}

	bb := bytes.NewBuffer([]byte{})
	err = tmpl.Execute(bb, struct {
		Config string
	}{
		Config: string(fileContent),
	})

	if err != nil {
		return "", err
	}

	dat, err := ioutil.ReadAll(bb)
	if err != nil {
		return "", err
	}

	return string(dat), nil
}

func (p *Plugin) RunAfterBuild(root string, args []string) error {
	return os.Remove("config/gen_database.go")
}
